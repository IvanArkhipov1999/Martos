name: Martos ci workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always


jobs:
  build:
    # TODO: all should be on self-hosted runners
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cargo build --lib --verbose

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: cargo test --verbose

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Fmt
        run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clippy
        run: cargo clippy -- -D clippy::all

  xtensa-esp32-rust-example-hello-world:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/hello-world && . /root/export-esp.sh && cargo build --release
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/hello-world && cargo fmt --all -- --check
      - name: Upload ELF artifact
        uses: actions/upload-artifact@v4
        with:
          name: xtensa-esp32-hello-world-elf
          path: examples/rust-examples/xtensa-esp32/hello-world/target/xtensa-esp32-none-elf/release/example_xtensa_esp32
          retention-days: 3

  xtensa-esp32-rust-example-dynamic-memory:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/dynamic-memory && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/dynamic-memory && cargo fmt --all -- --check

  xtensa-esp32-rust-example-timer:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/timer && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/timer && cargo fmt --all -- --check

  xtensa-esp32-rust-example-wifi:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/wifi && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/wifi && cargo fmt --all -- --check

  xtensa-esp32-rust-example-preemptive-scheduler:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/scheduler/preemptive && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/scheduler/preemptive && cargo fmt --all -- --check

  xtensa-esp32-rust-example-cooperative-scheduler:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/scheduler/cooperative && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/scheduler/cooperative && cargo fmt --all -- --check

  xtensa-esp32-static-library:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./c-library/xtensa-esp32 && . /root/export-esp.sh && cargo build --release
      - name: Fmt
        run: cd ./c-library/xtensa-esp32 && cargo fmt --all -- --check
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xtensa-esp32-static-library
          path: c-library/xtensa-esp32/target/xtensa-esp32-none-elf/release/libxtensa_esp32_static_lib.a
          retention-days: 7

  xtensa-esp32-c-example:
    needs: xtensa-esp32-static-library
    runs-on: ubuntu-latest
    env:
      IDF_PATH: /root/esp/esp-idf
      IDF_TOOLS_PATH: /root/.espressif
    container:
      image: arkhipovivan1/xtensa-esp32-c:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Download static library
        uses: actions/download-artifact@v4
        with:
          name: xtensa-esp32-static-library
          path: c-library/xtensa-esp32/target/xtensa-esp32-none-elf/release
      - name: Build
        run: cd ./examples/c-examples/xtensa-esp32 && . /root/esp/esp-idf/export.sh && make && esptool.py --chip esp32 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o main.bin main.elf


  xtensa-esp32-rust-example-hello-world-emulator:
    needs: xtensa-esp32-rust-example-hello-world
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download ELF artifact
        uses: actions/download-artifact@v4
        with:
          name: xtensa-esp32-hello-world-elf
          path: examples/rust-examples/xtensa-esp32/hello-world/target/xtensa-esp32-none-elf/release
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run with Wokwi CLI and assert UART output
        run: |
          set -e
          cd examples/rust-examples/xtensa-esp32/hello-world/target/xtensa-esp32-none-elf/release
          # Minimal Wokwi diagram for ESP32 DevKit
          cat > diagram.json << 'JSON'
          {
            "version": 1,
            "author": "ci",
            "editor": "code",
            "parts": [
              { "type": "board-esp32-devkit-v1", "id": "esp32", "top": -64, "left": -64 }
            ]
          }
          JSON
          npx -y @wokwi/cli@latest --diagram diagram.json --elf ./example_xtensa_esp32 --timeout 60000 --log-serial | tee wokwi.log || true
          grep -q "Setup hello world!" wokwi.log
          grep -q "Loop hello world!" wokwi.log
          grep -q "Counter =" wokwi.log

  risc-v-esp32c6-rust-example-hello-world:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/hello-world && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/hello-world && cargo fmt --all -- --check

  risc-v-esp32c6-rust-example-dynamic-memory:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/dynamic-memory && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/dynamic-memory && cargo fmt --all -- --check

  risc-v-esp32c6-rust-example-timer:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/timer && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/timer && cargo fmt --all -- --check

  risc-v-esp32c6-rust-example-wifi:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/wifi && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/wifi && cargo fmt --all -- --check

  risc-v-esp32c6-rust-example-scheduler:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/scheduler/cooperative && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/scheduler/cooperative && cargo fmt --all -- --check

  risc-v-esp32c6-static-library:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./c-library/risc-v-esp32-c6 && . /root/export-esp.sh && cargo build --release
      - name: Fmt
        run: cd ./c-library/risc-v-esp32-c6 && cargo fmt --all -- --check
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: risc-v-esp32c6-static-library
          path: c-library/risc-v-esp32-c6/target/riscv32imac-unknown-none-elf/release/librisc_v_esp32c6_static_lib.a
          retention-days: 7

  risc-v-esp32c6-c-example:
    needs: risc-v-esp32c6-static-library
    runs-on: ubuntu-latest
    env:
      IDF_PATH: /root/esp/esp-idf
      IDF_TOOLS_PATH: /root/.espressif
    container:
      image: arkhipovivan1/risc-v-esp32c6-c:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Download static library
        uses: actions/download-artifact@v4
        with:
          name: risc-v-esp32c6-static-library
          path: c-library/risc-v-esp32-c6/target/riscv32imac-unknown-none-elf/release
      - name: Build
        run: |
          sed -i 's/0x4086E610/0x408663A0/' "$IDF_PATH/components/esp_system/ld/esp32c6/memory.ld.in" &&
          cd ./examples/c-examples/risc-v-esp32c6 && . /root/esp/esp-idf/export.sh && make && esptool.py --chip esp32c6 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o main.bin main.elf


  mips64-rust-example-hello-world:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./examples/rust-examples/mips64/hello-world && cargo +nightly build --release
      - name: Fmt
        run: cd ./examples/rust-examples/mips64/hello-world && cargo +nightly fmt --all -- --check

  mips64-rust-example-dynamic-memory:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./examples/rust-examples/mips64/dynamic-memory && cargo +nightly build --release
      - name: Fmt
        run: cd ./examples/rust-examples/mips64/dynamic-memory && cargo +nightly fmt --all -- --check

  mips64-rust-example-timer:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./examples/rust-examples/mips64/timer && cargo +nightly build --release
      - name: Fmt
        run: cd ./examples/rust-examples/mips64/timer && cargo +nightly fmt --all -- --check

  mips64-rust-example-scheduler:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./examples/rust-examples/mips64/scheduler/cooperative && cargo +nightly build --release
      - name: Fmt
        run: cd ./examples/rust-examples/mips64/scheduler/cooperative && cargo +nightly fmt --all -- --check

  mips64-static-library:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./c-library/mips64 && cargo +nightly build --release
      - name: Fmt
        run: cd ./c-library/mips64 && cargo +nightly fmt --all -- --check
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mips64-static-library
          path: c-library/mips64/target/mips64el-unknown-linux-gnuabi64/release/libmips64_static_lib.a
          retention-days: 7

  mips64-timer-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: cargo test -F mips64_timer_tests

  cooperative-scheduler-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: cargo test -F cooperative_tests
