name: Martos ci workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always


jobs:
  build:
    # TODO: all should be on self-hosted runners
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cargo build --lib --verbose

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: cargo test --verbose

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Fmt
        run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clippy
        run: cargo clippy -- -D clippy::all

  xtensa-esp32-rust-example-hello-world:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/hello-world && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/hello-world && cargo fmt --all -- --check

  name: QEMU

  on:
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]

  env:
    CARGO_TERM_COLOR: always
    QEMU_VERSION: esp-develop-9.2.2-20250228

  jobs:
    setup-environment:
      runs-on: ubuntu-22.04
      steps:
        - uses: actions/checkout@v3

        - name: Install system dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y \
              meson ninja-build libglib2.0-0 libpixman-1-0 libsdl2-2.0-0 libslirp0 \
              libgcrypt20-dev libslirp-dev libpixman-1-dev libsdl2-dev libspice-server-dev \
              libusb-1.0-0-dev libcap-ng-dev libattr1-dev libaio-dev libnfs-dev libiscsi-dev \
              libcurl4-openssl-dev libssh-dev libpng-dev libjpeg-dev libncurses5-dev \
              libseccomp-dev libfdt-dev libvirglrenderer-dev libepoxy-dev libdrm-dev \
              libgbm-dev libpmem-dev libdaxctl-dev liburing-dev python3.11 python3.11-venv

        - name: Install Python dependencies
          run: |
            python3.11 -m pip install --upgrade pip
            pip install sphinx==5.3.0 sphinx_rtd_theme==1.1.1

        - name: Build and install QEMU
          run: |
            git clone -b ${{ env.QEMU_VERSION }} --depth 1 https://github.com/espressif/qemu.git
            cd qemu
            ./configure --target-list=xtensa-softmmu,riscv32-softmmu
            make -j$(nproc)
            sudo make install

    build-and-test-examples:
      needs: setup-environment
      runs-on: ubuntu-22.04
      strategy:
        matrix:
          example: [
            "xtensa-esp32/hello-world",
            "xtensa-esp32/dynamic-memory",
            "xtensa-esp32/timer",
            "risc-v-esp32-c6/hello-world",
            "risc-v-esp32-c6/dynamic-memory",
            "risc-v-esp32-c6/timer"
          ]
      steps:
        - uses: actions/checkout@v3

        - name: Setup Rust
          uses: actions-rs/toolchain@v1
          with:
            profile: minimal
            toolchain: nightly
            override: true
            components: rust-src

        - name: Build firmware
          run: |
            cd ./examples/rust-examples/${{ matrix.example }}
            cargo build --release
            cargo espflash save-image --chip ${{
              contains(matrix.example, 'xtensa') && 'esp32' || 'esp32c6'
            }} --merge firmware --release

        - name: Run in QEMU
          run: |
            case "${{ matrix.example }}" in
              *xtensa*)
                qemu-system-xtensa -nographic -machine esp32 \
                  -drive file=./firmware,if=mtd,format=raw -m 4M
                ;;
              *risc-v*)
                qemu-system-riscv32 -nographic -machine esp32c6 \
                  -drive file=./firmware,if=mtd,format=raw -m 4M
                ;;
            esac
          working-directory: ./examples/rust-examples/${{ matrix.example }}/target/release

    additional-checks:
      needs: setup-environment
      runs-on: ubuntu-22.04
      steps:
        - uses: actions/checkout@v3

        - name: Run standard checks
          run: |
            cargo fmt --all -- --check
            cargo clippy --all-targets -- -D warnings
            cargo test --all-features

  xtensa-esp32-rust-example-dynamic-memory:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/dynamic-memory && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/dynamic-memory && cargo fmt --all -- --check

  xtensa-esp32-rust-example-timer:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/timer && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/timer && cargo fmt --all -- --check

  xtensa-esp32-rust-example-wifi:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/wifi && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/wifi && cargo fmt --all -- --check

  xtensa-esp32-rust-example-scheduler:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/xtensa-esp32/scheduler && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/xtensa-esp32/scheduler && cargo fmt --all -- --check

  xtensa-esp32-static-library:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./c-library/xtensa-esp32 && . /root/export-esp.sh && cargo build --release
      - name: Fmt
        run: cd ./c-library/xtensa-esp32 && cargo fmt --all -- --check
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xtensa-esp32-static-library
          path: c-library/xtensa-esp32/target/xtensa-esp32-none-elf/release/libxtensa_esp32_static_lib.a
          retention-days: 7

  xtensa-esp32-c-example:
    needs: xtensa-esp32-static-library
    runs-on: ubuntu-latest
    env:
      IDF_PATH: /root/esp/esp-idf
      IDF_TOOLS_PATH: /root/.espressif
    container:
      image: arkhipovivan1/xtensa-esp32-c:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Download static library
        uses: actions/download-artifact@v4
        with:
          name: xtensa-esp32-static-library
          path: c-library/xtensa-esp32/target/xtensa-esp32-none-elf/release
      - name: Build
        run: cd ./examples/c-examples/xtensa-esp32 && . /root/esp/esp-idf/export.sh && make && esptool.py --chip esp32 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o main.bin main.elf


  risc-v-esp32c6-rust-example-hello-world:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/hello-world && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/hello-world && cargo fmt --all -- --check

  risc-v-esp32c6-rust-example-dynamic-memory:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/dynamic-memory && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/dynamic-memory && cargo fmt --all -- --check

  risc-v-esp32c6-rust-example-timer:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/timer && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/timer && cargo fmt --all -- --check

  risc-v-esp32c6-rust-example-wifi:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./examples/rust-examples/risc-v-esp32-c6/wifi && . /root/export-esp.sh && cargo build
      - name: Fmt
        run: cd ./examples/rust-examples/risc-v-esp32-c6/wifi && cargo fmt --all -- --check

  risc-v-esp32c6-static-library:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: arkhipovivan1/xtensa-esp32-rust:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cd ./c-library/risc-v-esp32-c6 && . /root/export-esp.sh && cargo build --release
      - name: Fmt
        run: cd ./c-library/risc-v-esp32-c6 && cargo fmt --all -- --check
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: risc-v-esp32c6-static-library
          path: c-library/risc-v-esp32-c6/target/riscv32imac-unknown-none-elf/release/librisc_v_esp32c6_static_lib.a
          retention-days: 7

  risc-v-esp32c6-c-example:
    needs: risc-v-esp32c6-static-library
    runs-on: ubuntu-latest
    env:
      IDF_PATH: /root/esp/esp-idf
      IDF_TOOLS_PATH: /root/.espressif
    container:
      image: arkhipovivan1/risc-v-esp32c6-c:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Download static library
        uses: actions/download-artifact@v4
        with:
          name: risc-v-esp32c6-static-library
          path: c-library/risc-v-esp32-c6/target/riscv32imac-unknown-none-elf/release
      - name: Build
        run: |
          sed -i 's/0x4086E610/0x408629D0/' "$IDF_PATH/components/esp_system/ld/esp32c6/memory.ld.in" &&
          cd ./examples/c-examples/risc-v-esp32c6 && . /root/esp/esp-idf/export.sh && make && esptool.py --chip esp32c6 elf2image --flash_mode="dio" --flash_freq "40m" --flash_size "4MB" -o main.bin main.elf


  mips64-rust-example-hello-world:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./examples/rust-examples/mips64/hello-world && cargo +nightly build --release
      - name: Fmt
        run: cd ./examples/rust-examples/mips64/hello-world && cargo +nightly fmt --all -- --check

  mips64-rust-example-dynamic-memory:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./examples/rust-examples/mips64/dynamic-memory && cargo +nightly build --release
      - name: Fmt
        run: cd ./examples/rust-examples/mips64/dynamic-memory && cargo +nightly fmt --all -- --check

  mips64-rust-example-timer:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./examples/rust-examples/mips64/timer && cargo +nightly build --release
      - name: Fmt
        run: cd ./examples/rust-examples/mips64/timer && cargo +nightly fmt --all -- --check

  mips64-static-library:
    runs-on: ubuntu-latest
    env:
      CARGO_HOME: /root/.cargo
      RUSTUP_HOME: /root/.rustup
    container:
      image: ubuntu:latest
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Dependencies
        run: apt update && apt install curl build-essential lld -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && echo 'PATH="${PATH}:/root/.cargo/bin"' >> $GITHUB_PATH && . "/root/.cargo/env" && rustup toolchain install nightly && rustup default 1.71 && rustup target add mips64el-unknown-linux-gnuabi64 && rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - name: Build
        run: cd ./c-library/mips64 && cargo +nightly build --release
      - name: Fmt
        run: cd ./c-library/mips64 && cargo +nightly fmt --all -- --check
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mips64-static-library
          path: c-library/mips64/target/mips64el-unknown-linux-gnuabi64/release/libmips64_static_lib.a
          retention-days: 7

  mips64-timer-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: cargo test -F mips64_timer_tests
