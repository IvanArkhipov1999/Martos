name: Docker Build and Push

on:
  push:
    paths:
      - 'dockers/**'

jobs:
  build-xtensa-esp32-rust-dependencies-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image with xtensa esp32 rust dependencies
        run: docker build -f ./dockers/xtensa-esp32/rust-dependencies/xtensa-esp32-rust.dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/xtensa-esp32-rust .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/xtensa-esp32-rust:latest

      - name: Install QEMU dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build \
          libglib2.0-0 libpixman-1-0 libsdl2-2.0-0 \
          libslirp0 libgcrypt20-dev libgcrypt20 libslirp-dev
          curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11
          python3.11 -m pip install --upgrade pip setuptools

      - name: Install and build QEMU
        run: git clone -b esp-develop-9.2.2-20250228 https://github.com/espressif/qemu.git --depth 1 --single-branch
              cd qemu
              python3.11 -m venv .venv
              source .venv/bin/activate
              pip install sphinx==5.3.0 sphinx_rtd_theme==1.1.1
              ./configure --target-list=xtensa-softmmu,riscv32-softmmu
              make -j$(nproc)
              sudo make install

      - name: Build espflash Docker image
        run: |
          cd ~/Martos
          sudo docker build -t vladimir-kiselev/espflash -f Dockerfile .
          sudo docker-compose up

  build-xtensa-esp32-c-dependencies-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image with xtensa esp32 C dependencies
        run: docker build -f ./dockers/xtensa-esp32/c-dependencies/xtensa-esp32-c.dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/xtensa-esp32-c .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/xtensa-esp32-c:latest

  build-risc-v-esp32c6-c-dependencies-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image with risc-v esp32c6 C dependencies
        run: docker build -f ./dockers/risc-v-esp32c6/c-dependencies/risc-v-esp32c6-c.dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/risc-v-esp32c6-c .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/risc-v-esp32c6-c:latest

  build-esp-c-dependencies-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image with C dependencies for all esp targets
        run: docker build -f ./dockers/esp/esp.dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/esp-c .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/esp-c:latest

  build-espflash-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build espflash Docker image
        run: |
          cd ~/Martos
          sudo docker build -t vladimir-kiselev/espflash -f Dockerfile .
          sudo docker-compose up
